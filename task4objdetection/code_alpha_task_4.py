# -*- coding: utf-8 -*-
"""code alpha task 4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1te1IJlpDXysEeMm3THXrl4flT1qlkCSl
"""

!pip install ultralytics opencv-python-headless deep_sort_realtime

from google.colab import files
uploaded = files.upload()  # Upload a .mp4 video file

import cv2
from ultralytics import YOLO
from deep_sort_realtime.deepsort_tracker import DeepSort
from google.colab.patches import cv2_imshow
import os

# Load YOLOv8 model
model = YOLO("yolov8n.pt")  # Use yolov8s.pt or yolov8m.pt for better accuracy

# Initialize Deep SORT tracker
tracker = DeepSort(max_age=30)

# Get uploaded video file name
video_path = list(uploaded.keys())[0]
cap = cv2.VideoCapture(video_path)

# Define video writer
fourcc = cv2.VideoWriter_fourcc(*'XVID')
ret, frame = cap.read()
height, width = frame.shape[:2]
out = cv2.VideoWriter('output.avi', fourcc, 20.0, (width, height))

# Process video frames
frame_count = 0
while ret:
    results = model(frame)[0]

    detections = []
    for box in results.boxes.data.tolist():
        x1, y1, x2, y2, score, class_id = box
        if score < 0.4:
            continue
        class_name = model.names[int(class_id)]
        detections.append(([int(x1), int(y1), int(x2 - x1), int(y2 - y1)], score, class_name))

    tracks = tracker.update_tracks(detections, frame=frame)

    for track in tracks:
        if not track.is_confirmed():
            continue
        track_id = track.track_id
        l, t, r, b = track.to_ltrb()
        class_name = track.get_det_class()

        cv2.rectangle(frame, (int(l), int(t)), (int(r), int(b)), (0, 255, 0), 2)
        cv2.putText(frame, f"{class_name}-{track_id}", (int(l), int(t) - 10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 255), 2)

    out.write(frame)

    # Display every 30th frame (optional, as Colab is slow)
    if frame_count % 30 == 0:
        cv2_imshow(frame)

    ret, frame = cap.read()
    frame_count += 1

cap.release()
out.release()

